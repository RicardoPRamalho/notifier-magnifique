/*
 * Copyright 2013 Thiago Uriel M. Garcia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.uriel.nm.server.view;

import io.uriel.nm.server.business.SubscriptionServices;
import io.uriel.nm.server.business.model.Device;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

@Controller
@Scope("view")
public class SubscriptionsBean extends AbstractManagedBean 
{
    /** Serialization constant generated by JVM. */
    private static final long serialVersionUID = -8313831191353361482L;
    
    /** Service used to manage subscriptions. */
    @Autowired
    private SubscriptionServices subscriptionService;
    
    /**
     * Provides a <b>live</b> version of the current list of subscriptions.
     * 
     * @return
     *      An {@code Iterable} with all devices currently subscribed.
     */
    public Iterable<Device> getSubscriptions()
    {
        logger.debug("Requesting a live subscription list.");
        return subscriptionService.listDevices();
    }
    
    /** 
     * Cancels a subscription for a given device indentifier.
     * 
     * @param deviceId
     *      Identifier of the device that is going to be unregistered. 
     */
    public void unsubscribe(String deviceId)
    {
        logger.debug(message("log.unsubscribe.begin", deviceId));
        subscriptionService.unsubscribe(deviceId);
    }
    
    public void notify(String deviceId, String message)
    {
        logger.debug(message("log.notify.begin", deviceId));
    }
}
